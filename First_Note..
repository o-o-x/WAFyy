WAFyy

just drafting..


The idea:
	
	Build the smartest simple WAFyy :)
	The Wafy mechanism works in a way that regex comparetion proccess as secondary mesure for application attacks.
	The first line of defence is build on smart filtering mechanism that is easy to configure.


Requierments:
	
	*apt-get install php5-mysqlnd


Bullets:
	*One page application
	*Custom user and password before creating the database
	*requierments bubles (begginers install and QA)
	*Smart online parameter risk engine
		*max length
		*min length
		*is only digits? 
		*is only alpha?
		*is only digits and alpha?
		*configured windows and non-configured window
		*policy section
		*filtering section
	*Online WAF section
	*Blocking ip from recent attacks list
	*Change WAF mode by button (blocking, warning)




Functions:

	CORE:

		1. Get all request parameters names and return the in an array
		2. Get un-configured parameters values 
		3. Check un-configured parameters limit (15)
		4. Get configured parameters values 
		5. Send parameters and values to Online-waf
		6. check risk level
		7. Anomaly Detection return common properties such as (lenght,alphanumeric? or numeric only)
		8.Check all incoming parameters by REGEX comperation mechanism


	WEB-UI:

		general style:

		1. use only ajax for updating DIV's
		2. colors: white, orange
		3. only square corners
		4. define new unconfigured window bubble

		Risk-engine
			1. Get configured parameters every 15 second and refresh relevant DIV
			2. Get un-configured parameters every 15 second and refresh relevant DIV

		Online-Waf

			1. Get list of recent attacks
			2. block ip from recent attacks
			3. set 3 status windows showing recent attacks in time period (today,this month, this year)
			4. set monitor mode and blocking mode by button
			5. payload list control (default_basic or manual payloads) (use_getline_function to avoid LFI)
			6. reset parameter configuration from recet attacks windows

		instelation

			1. Create empty DATABASE (set only username and password once before creating database)
			2. parameters to ignore (placeholder:leave empty for none)
			3. 



DATABASE:

	tables:
			* configured parameters (con_parmas)
				[id,name,lenght,alphatype]
			* unconfigured parameters (uncon_params)
				[id,name]
			*  	a. unconfigured latest parameters values (15 per parameter)
				b. configured latest parameters values (10 per parameter)
			* waf_online_recent_attacks
			* waf_block_list
			* waf_payloads [type_of_payload,regex_value]
			* system_settings [properties,flag(0,1)]
			* user_seesion_control



			Commands used:

				Connection String:

					$improved_connection=mysqli_connect("localhost","root","","WAFyy");


				Create new database named WAFyy :):

					create database WAFyy;
					use WAFyy;

				Create waf_payloads table for handeling custem user payloads:
					CREATE TABLE `system_settings` (`property` varchar(15) DEFAULT NULL,`flag` boolean NOT NULL DEFAULT 0);


				Create system_settings table for use global application settings:
					CREATE TABLE `waf_payloads` (`type_of_payload` varchar(15) DEFAULT NULL,`regex_value` varchar(57) DEFAULT NULL);

				Insert into 
					INSERT INTO waf_payloads VALUES('xss','%3C%2Fscript%3E');
